"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatearcade_studio"]("main",{

/***/ "./public/js/editor/ui/Editor.js":
/*!***************************************!*\
  !*** ./public/js/editor/ui/Editor.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Editor\": () => (/* binding */ Editor)\n/* harmony export */ });\n/* harmony import */ var _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../libs/three.module.js */ \"./public/js/editor/libs/three.module.js\");\n/* harmony import */ var _Config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Config.js */ \"./public/js/editor/ui/Config.js\");\n/* harmony import */ var _Loader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Loader.js */ \"./public/js/editor/ui/Loader.js\");\n/* harmony import */ var _History_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./History.js */ \"./public/js/editor/ui/History.js\");\n/* harmony import */ var _Strings_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Strings.js */ \"./public/js/editor/ui/Strings.js\");\n/* harmony import */ var _Api_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Api.js */ \"./public/js/editor/ui/Api.js\");\n/* harmony import */ var _Storage_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Storage.js */ \"./public/js/editor/ui/Storage.js\");\n/* harmony import */ var _Assets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Assets.js */ \"./public/js/editor/ui/Assets.js\");\n/* harmony import */ var _core_helpers_RectAreaLightHelper_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../core/helpers/RectAreaLightHelper.js */ \"./public/js/editor/core/helpers/RectAreaLightHelper.js\");\n/* harmony import */ var _utils_ObjectLoader_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/ObjectLoader.js */ \"./public/js/editor/utils/ObjectLoader.js\");\n/* harmony import */ var _commands_AddObjectCommand_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../commands/AddObjectCommand.js */ \"./public/js/editor/commands/AddObjectCommand.js\");\n/* harmony import */ var _utils_index__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/index */ \"./public/js/editor/utils/index.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar _DEFAULT_CAMERA = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera(50, 1, 0.01, 1000);\n_DEFAULT_CAMERA.name = 'PerspectiveCamera';\n_DEFAULT_CAMERA.position.set(0, 5, 10);\n_DEFAULT_CAMERA.lookAt(new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Vector3());\nfunction Editor(project) {\n  if (project) {\n    this.projectId = project.id;\n  }\n  var Signal = signals.Signal;\n  this.signals = {\n    // loading\n    loadingFinished: new Signal(),\n    // workspace\n\n    updateWorkspace: new Signal(),\n    // script\n\n    editScript: new Signal(),\n    saveScript: new Signal(),\n    // sidebar\n\n    sidebarTabChanged: new Signal(),\n    // libary\n\n    libraryBackEnabled: new Signal(),\n    // timeliner\n\n    timelineChanged: new Signal(),\n    timelineUpdated: new Signal(),\n    timelinePlayToggled: new Signal(),\n    timelineKeyframe: new Signal(),\n    // fullscreen\n\n    toggleFullscreen: new Signal(),\n    // player\n\n    startPlayer: new Signal(),\n    stopPlayer: new Signal(),\n    // notifications\n\n    editorCleared: new Signal(),\n    savingStarted: new Signal(),\n    savingFinished: new Signal(),\n    snapChanged: new Signal(),\n    spaceChanged: new Signal(),\n    rendererChanged: new Signal(),\n    rendererUpdated: new Signal(),\n    activeCameraChanged: new Signal(),\n    sceneBackgroundTypeChanged: new Signal(),\n    sceneBackgroundChanged: new Signal(),\n    sceneEnvironmentChanged: new Signal(),\n    sceneFogChanged: new Signal(),\n    sceneFogSettingsChanged: new Signal(),\n    sceneGraphChanged: new Signal(),\n    sceneUserDataChanged: new Signal(),\n    sceneRendered: new Signal(),\n    sceneLoaded: new Signal(),\n    filterChanged: new Signal(),\n    filterRemoved: new Signal(),\n    cameraChanged: new Signal(),\n    cameraResetted: new Signal(),\n    geometryChanged: new Signal(),\n    objectSelected: new Signal(),\n    objectFocused: new Signal(),\n    objectAdded: new Signal(),\n    objectsAdded: new Signal(),\n    objectChanged: new Signal(),\n    objectRemoved: new Signal(),\n    objectsRemoved: new Signal(),\n    objectRenamed: new Signal(),\n    voxelsRemoved: new Signal(),\n    voxelsAdded: new Signal(),\n    voxelsUnselect: new Signal(),\n    cameraAdded: new Signal(),\n    cameraRemoved: new Signal(),\n    cameraLocked: new Signal(),\n    cameraUnlocked: new Signal(),\n    helperAdded: new Signal(),\n    helperRemoved: new Signal(),\n    materialAdded: new Signal(),\n    materialChanged: new Signal(),\n    materialRemoved: new Signal(),\n    scriptAdded: new Signal(),\n    scriptChanged: new Signal(),\n    scriptRemoved: new Signal(),\n    attributeAdded: new Signal(),\n    attributeChanged: new Signal(),\n    attributeRemoved: new Signal(),\n    tagAdded: new Signal(),\n    tagSet: new Signal(),\n    tagChanged: new Signal(),\n    tagRemoved: new Signal(),\n    projectAssetAdded: new Signal(),\n    geometryAssetAdded: new Signal(),\n    materialAssetAdded: new Signal(),\n    imageAssetAdded: new Signal(),\n    audioAssetAdded: new Signal(),\n    videoAssetAdded: new Signal(),\n    environmentAssetAdded: new Signal(),\n    animationAssetAdded: new Signal(),\n    assetRemoved: new Signal(),\n    geometryAssetDownloading: new Signal(),\n    imageAssetDownloading: new Signal(),\n    materialAssetDownloading: new Signal(),\n    environmentAssetDownloading: new Signal(),\n    moveAsset: new Signal(),\n    windowResize: new Signal(),\n    showHelpersChanged: new Signal(),\n    showGridHelperChanged: new Signal(),\n    showLightHelpersChanged: new Signal(),\n    showCameraHelpersChanged: new Signal(),\n    showCompassChanged: new Signal(),\n    refreshSidebarObject3D: new Signal(),\n    historyChanged: new Signal(),\n    titleChanged: new Signal(),\n    viewportCameraChanged: new Signal(),\n    viewportWASDRFSpeedChanged: new Signal(),\n    viewportZoomSpeedChanged: new Signal(),\n    groupCollapseToggled: new Signal(),\n    showColorPickerChanged: new Signal(),\n    materialFolderShow: new Signal(),\n    imageFolderShow: new Signal(),\n    projectItemUpdated: new Signal(),\n    audioPlay: new Signal(),\n    audioStop: new Signal(),\n    addRecentProject: new Signal(),\n    projectsSubFolderAdded: new Signal(),\n    projectsSubFolderRemoved: new Signal()\n  };\n  this.api = new _Api_js__WEBPACK_IMPORTED_MODULE_5__.Api(this);\n  this.config = new _Config_js__WEBPACK_IMPORTED_MODULE_1__.Config(this);\n  this.history = new _History_js__WEBPACK_IMPORTED_MODULE_3__.History(this);\n  this.storage = new _Storage_js__WEBPACK_IMPORTED_MODULE_6__.Storage(this);\n  this.strings = new _Strings_js__WEBPACK_IMPORTED_MODULE_4__.Strings(this.config);\n  this.loader = new _Loader_js__WEBPACK_IMPORTED_MODULE_2__.Loader(this);\n  this.assets = new _Assets_js__WEBPACK_IMPORTED_MODULE_7__.Assets(this);\n  this.listener = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.AudioListener();\n  this.scene = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Scene();\n  this.defaultCameraWhenNoneIsPresent = _DEFAULT_CAMERA.clone();\n  this.viewportCamera = this.defaultCameraWhenNoneIsPresent;\n  this.scene.name = 'Scene';\n  this.scene.background = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Color(0x14151b);\n  this.lightHelpers = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Scene();\n  this.cameraHelpers = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Scene();\n  this.objects = {};\n  this.objectsWithoutVoxels = {};\n  this.geometries = {};\n  this.materials = {};\n  this.textures = {};\n  this.scripts = [{\n    name: 'untitled',\n    json: [],\n    source: ''\n  }];\n  this.attributes = [];\n  this.attributeTextMap = {};\n  this.timelines = [{\n    name: 'untitled',\n    duration: 20,\n    channels: [],\n    tracks: []\n  }];\n  this.timelineIndex = 0;\n  this.tags = {};\n  this.materialsRefCounter = new Map(); // tracks how often is a material used by a 3D object\n\n  this.mixer = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.AnimationMixer(this.scene);\n  this.selected = null;\n  this.helpers = {};\n  this.spotLights = {};\n  this.paint = {\n    color: '#ffffff',\n    material: null,\n    texture: null,\n    colorEnabled: true,\n    materialEnabled: true,\n    textureEnabled: true\n  };\n  this.isPlaying = false;\n  this.isScripting = false;\n  this.isFullscreen = false;\n  this.showHelpers = true;\n  this.showColorPicker = false;\n  this.snapEnabled = false;\n  this.cameras = {};\n  this.isInClearMode = false;\n}\nEditor.prototype = {\n  setScene: function (scene) {\n    this.scene.uuid = scene.uuid;\n    this.scene.name = scene.name;\n    this.scene.background = scene.background !== null ? scene.background.clone() : null;\n    this.scene.environment = scene.environment !== null ? scene.environment.clone() : null;\n    this.scene.equirectBackground = scene.equirectBackground ? scene.equirectBackground.clone() : null;\n    if (scene.fog !== null) this.scene.fog = scene.fog.clone();\n    this.scene.userData = JSON.parse(JSON.stringify(scene.userData));\n\n    // avoid render per object\n\n    this.signals.sceneGraphChanged.active = false;\n    while (scene.children.length > 0) {\n      this.addObject(scene.children[0]);\n    }\n    for (var targetId in this.spotLights) {\n      var light = this.spotLights[targetId];\n      var target = light.userData.target;\n      if (target) {\n        if (this.objectByUuid(target.uuid)) {\n          delete this.spotLights[targetId];\n          light.target = this.objectByUuid(target.uuid);\n          light.target.updateMatrixWorld(true);\n        } else {\n          light.target.position.fromArray(target.position);\n          light.target.updateMatrixWorld(true);\n          this.signals.objectChanged.dispatch(light);\n        }\n      }\n    }\n    this.signals.sceneGraphChanged.active = true;\n    this.signals.sceneGraphChanged.dispatch();\n    this.signals.filterChanged.dispatch();\n\n    // if (this.scene.userData.background) {\n\n    // \tvar type = this.scene.userData.background.type;\n    // \tvar id = this.scene.userData.background.id;\n    // \tvar assetTexture = this.assets.get('Image', 'id', id);\n    // \tvar assetEnvironment = this.assets.get('Environment', 'id', id);\n    // \tvar asset = null;\n    // \tif (type == 'Texture') {\n    // \t\tasset = assetTexture;\n    // \t} else {\n    // \t\tif (assetEnvironment) {\n    // \t\t\tasset = assetEnvironment;\n    // \t\t} else {\n    // \t\t\tasset = assetTexture;\n    // \t\t}\n    // \t}\n\n    // \tif (asset) {\n    // \t\tvar texture = asset.texture;\n\n    // \t\tthis.signals.sceneBackgroundTypeChanged.dispatch(type, id, texture);\n    // \t}\n\n    // }\n\n    // if (this.scene.userData.backgroundTexture) {\n    // \tvar id = this.scene.userData.backgroundTexture.id;\n    // \tvar assetTexture = this.assets.get('Image', 'id', id);\n\n    // \tif (assetTexture) {\n    // \t\tvar texture = assetTexture.texture;\n\n    // \t\tthis.signals.sceneBackgroundTypeChanged.dispatch('Texture', id, texture);\n    // \t}\n    // } else if (this.scene.userData.background){\n    // \tvar id = this.scene.userData.background.id;\n    // \tvar assetEnvironment = this.assets.get('Environment', 'id', id);\n\n    // \t\tif ( !assetEnvironment ) {\n\n    // \t\t\tassetEnvironment = this.assets.get( 'Image', 'id', id );\n\n    // \t\t}\n    // \tif (assetEnvironment) {\n    // \t\tvar texture = assetEnvironment.texture;\n\n    // \t\tthis.signals.sceneBackgroundTypeChanged.dispatch('Equirectangular', id, texture);\n    // \t}\n    // }\n  },\n\n  //\n\n  addObject: function (object, parent, index) {\n    var scope = this;\n    object.traverse(function (child) {\n      if (child.geometry !== undefined) scope.addGeometry(child.geometry);\n      if (child.material !== undefined) {\n        scope.addMaterial(child.material);\n      }\n      ;\n      if (child.isDirectionalLight) {\n        scope.addHelper(child.shadow.camera, child);\n        //scope.addHelper( child.shadow.camera, child );\n      }\n\n      if (child.isSpotLight) {\n        scope.addHelper(child.shadow.camera, child);\n      }\n      scope.addCamera(child);\n      scope.addHelper(child, child);\n      scope.objects[child.uuid] = child.name;\n      let isVoxelLocal = false;\n      if (child.userData && child.userData.isVoxel) {\n        isVoxelLocal = true;\n      }\n      if (!isVoxelLocal) {\n        scope.objectsWithoutVoxels[child.uuid] = child.name;\n      }\n    });\n    if (parent === undefined) {\n      this.scene.add(object);\n    } else {\n      parent.children.splice(index, 0, object);\n      object.parent = parent;\n    }\n    this.signals.objectAdded.dispatch(object);\n    this.signals.sceneGraphChanged.dispatch();\n    if (object.isSpotLight) {\n      this.lightHelpers.add(object.target);\n      this.spotLights[object.target.id] = object;\n    }\n  },\n  addObjects: function (objectsToAdd, parent) {\n    var scope = this;\n    objectsToAdd.forEach(object => {\n      if (object) {\n        object.traverse(function (child) {\n          if (child.geometry !== undefined) scope.addGeometry(child.geometry);\n          if (child.material !== undefined) scope.addMaterial(child.material);\n          scope.addCamera(child);\n          scope.addHelper(child, child);\n          scope.objects[child.uuid] = child.name;\n          let isVoxelLocal = false;\n          if (child.userData && child.userData.isVoxel) {\n            isVoxelLocal = true;\n          }\n          if (!isVoxelLocal) {\n            scope.objectsWithoutVoxels[child.uuid] = child.name;\n          }\n        });\n        if (parent === undefined) {\n          this.scene.add(object);\n        } else {\n          parent.children.push(object);\n          object.parent = parent;\n        }\n      }\n    });\n    this.signals.objectsAdded.dispatch(objectsToAdd);\n    this.signals.sceneGraphChanged.dispatch();\n  },\n  addObjects_voxels: function (objectsToAdd, parent) {\n    var scope = this;\n    objectsToAdd.forEach(object => {\n      if (object) {\n        object.traverse(function (child) {\n          if (child.geometry !== undefined) scope.addGeometry(child.geometry);\n          if (child.material !== undefined) scope.addMaterial(child.material);\n          scope.addCamera(child);\n          scope.addHelper(child, child);\n          scope.objects[child.uuid] = child.name;\n          let isVoxelLocal = false;\n          if (child.userData && child.userData.isVoxel) {\n            isVoxelLocal = true;\n          }\n          if (!isVoxelLocal) {\n            scope.objectsWithoutVoxels[child.uuid] = child.name;\n          }\n        });\n        if (parent === undefined) {\n          this.scene.add(object);\n        } else {\n          parent.children.push(object);\n          object.parent = parent;\n        }\n      }\n    });\n    this.signals.objectsAdded.dispatch(objectsToAdd);\n    //this.signals.sceneGraphChanged.dispatch();\n  },\n\n  moveObject: function (object, parent, before) {\n    if (parent === undefined) {\n      parent = this.scene;\n    }\n    parent.add(object);\n\n    // sort children array\n\n    if (before !== undefined) {\n      var index = parent.children.indexOf(before);\n      parent.children.splice(index, 0, object);\n      parent.children.pop();\n    }\n    this.signals.sceneGraphChanged.dispatch();\n  },\n  nameObject: function (object, name) {\n    object.name = name;\n    this.signals.sceneGraphChanged.dispatch();\n    this.objects[object.uuid] = name;\n    let isVoxelLocal = false;\n    if (object.userData && object.userData.isVoxel) {\n      isVoxelLocal = true;\n    }\n    if (!isVoxelLocal) {\n      this.objectsWithoutVoxels[object.uuid] = object.name;\n    }\n  },\n  getNumberOfCameras: function () {\n    return Object.keys(this.cameras).length;\n  },\n  removeObject: function (object) {\n    // TODO::\n    // Prevent deletion of last camera\n    // Automatically switch camera if currently active one is deleted\n    if (object.isCamera && !this.isInClearMode) {\n      if (this.getNumberOfCameras() < 2) {\n        alert(\"You can not delete this camera because a scene must have a least one camera.\");\n        return;\n      }\n    }\n    if (object.parent === null) return; // avoid deleting the scene\n    var scope = this;\n    object.traverse(function (child) {\n      scope.removeCamera(child);\n      scope.removeHelper(child);\n      if (child.isDirectionalLight) {\n        scope.removeHelper(child.shadow.camera);\n      }\n      if (child.isSpotLight) {\n        scope.removeHelper(child.shadow.camera);\n      }\n      if (child.isSpotLight) {\n        child.target.parent.remove(child.target);\n        delete scope.spotLights[child.target.id];\n      }\n      delete scope.objects[child.uuid];\n      delete scope.objectsWithoutVoxels[child.uuid];\n      if (child.material !== undefined) {\n        scope.removeMaterial(child.material);\n      }\n    });\n    object.parent.remove(object);\n    delete scope.objects[object.uuid];\n    delete scope.objectsWithoutVoxels[object.uuid];\n    for (var tag in scope.tags) {\n      var index = scope.tags[tag].indexOf(object.uuid);\n      if (index != -1) {\n        scope.tags[tag].splice(index, 1);\n      }\n    }\n    this.signals.objectRemoved.dispatch(object);\n    this.signals.sceneGraphChanged.dispatch();\n  },\n  removeObjects: function (objectsToDelete, parent) {\n    var scope = this;\n    objectsToDelete.forEach(object => {\n      object.traverse(function (child) {\n        scope.removeCamera(child);\n        scope.removeHelper(child);\n        delete scope.objects[child.uuid];\n        delete scope.objectsWithoutVoxels[child.uuid];\n        if (child.material !== undefined) scope.removeMaterial(child.material);\n      });\n      parent.remove(object);\n      delete scope.objects[object.uuid];\n      delete scope.objectsWithoutVoxels[object.uuid];\n      for (var tag in scope.tags) {\n        var index = scope.tags[tag].indexOf(object.uuid);\n        if (index != -1) {\n          scope.tags[tag].splice(index, 1);\n        }\n      }\n    });\n    this.signals.objectsRemoved.dispatch(objectsToDelete);\n    this.signals.sceneGraphChanged.dispatch();\n  },\n  removeObjects_voxel: function (objectsToDelete, parent) {\n    var scope = this;\n    objectsToDelete.forEach(object => {\n      object.traverse(function (child) {\n        scope.removeCamera(child);\n        scope.removeHelper(child);\n        delete scope.objects[child.uuid];\n        delete scope.objectsWithoutVoxels[child.uuid];\n        if (child.material !== undefined) scope.removeMaterial(child.material);\n      });\n      parent.remove(object);\n      delete scope.objects[object.uuid];\n      delete scope.objectsWithoutVoxels[object.uuid];\n    });\n  },\n  addGeometry: function (geometry) {\n    this.geometries[geometry.uuid] = geometry;\n  },\n  setGeometryName: function (geometry, name) {\n    geometry.name = name;\n    this.signals.sceneGraphChanged.dispatch();\n  },\n  addMaterial: function (material) {\n    material.transparent = true;\n    if (Array.isArray(material)) {\n      for (var i = 0, l = material.length; i < l; i++) {\n        this.addMaterialToRefCounter(material[i]);\n      }\n    } else {\n      this.addMaterialToRefCounter(material);\n    }\n    this.signals.materialAdded.dispatch();\n  },\n  addMaterialToRefCounter: function (material) {\n    var materialsRefCounter = this.materialsRefCounter;\n    var count = materialsRefCounter.get(material);\n    if (count === undefined) {\n      materialsRefCounter.set(material, 1);\n      this.materials[material.uuid] = material;\n    } else {\n      count++;\n      materialsRefCounter.set(material, count);\n    }\n  },\n  removeMaterial: function (material) {\n    if (Array.isArray(material)) {\n      for (var i = 0, l = material.length; i < l; i++) {\n        this.removeMaterialFromRefCounter(material[i]);\n      }\n    } else {\n      this.removeMaterialFromRefCounter(material);\n    }\n    this.signals.materialRemoved.dispatch();\n  },\n  removeMaterialFromRefCounter: function (material) {\n    var materialsRefCounter = this.materialsRefCounter;\n    var count = materialsRefCounter.get(material);\n    count--;\n    if (count === 0) {\n      materialsRefCounter.delete(material);\n      delete this.materials[material.uuid];\n    } else {\n      materialsRefCounter.set(material, count);\n    }\n  },\n  getMaterialById: function (id) {\n    var material;\n    var materials = Object.values(this.materials);\n    for (var i = 0; i < materials.length; i++) {\n      if (materials[i].id === id) {\n        material = materials[i];\n        break;\n      }\n    }\n    return material;\n  },\n  setMaterialName: function (material, name) {\n    material.name = name;\n    this.signals.sceneGraphChanged.dispatch();\n  },\n  addTexture: function (texture) {\n    this.textures[texture.uuid] = texture;\n  },\n  addTimeline: function () {\n    this.timelines.push({\n      name: `untitled`,\n      duration: 20,\n      tracks: [],\n      channels: []\n    });\n    this.timelineIndex = this.timelines.length - 1;\n  },\n  deleteTimeline: function (index) {\n    if (this.timelines.length > 1) {\n      this.timelines.splice(index, 1);\n      if (this.timelineIndex >= index) {\n        this.timelineIndex = Math.max(0, this.timelineIndex - 1);\n      }\n    }\n  },\n  changeTimeline: function (index) {\n    this.timelineIndex = index;\n  },\n  addTrack: function (track) {\n    this.timelines[this.timelineIndex].tracks.push(track);\n  },\n  getTimelineNames: function () {\n    var names = {};\n    for (var timeline of this.timelines) {\n      names[this.timelines.indexOf(timeline)] = timeline.name;\n    }\n    return names;\n  },\n  getCurrentTimeline: function () {\n    return this.timelines[this.timelineIndex];\n  },\n  addFirstCameraToSceneIfRequired() {\n    var scope = this;\n    if (scope.getCameraCount() > 0) {\n      return;\n    }\n    var cameraObject = _DEFAULT_CAMERA.clone();\n    new _commands_AddObjectCommand_js__WEBPACK_IMPORTED_MODULE_10__.AddObjectCommand(scope, cameraObject).execute();\n    scope.viewportCamera = cameraObject;\n    scope.setActiveCamera(cameraObject.uuid);\n  },\n  setActiveCamera(uuid) {\n    var editor = this;\n    editor.scene.userData.activeCamera = uuid;\n    editor.signals.activeCameraChanged.dispatch(uuid);\n    editor.signals.sceneUserDataChanged.dispatch();\n  },\n  getCameraCount(type) {\n    var count = 0;\n    for (let uid in this.cameras) {\n      var cameraObject = this.cameras[uid];\n      if (type) {\n        if (type === 'perspective') {\n          if (cameraObject.isPerspectiveCamera) {\n            count++;\n          }\n        } else if (type === 'orthographic') {\n          if (cameraObject.isOrthographicCamera) {\n            count++;\n          }\n        }\n      } else {\n        count++;\n      }\n    }\n    return count;\n  },\n  addCamera: function (camera) {\n    if (camera.isCamera) {\n      if (camera.uuid === this.scene.userData.activeCamera) {\n        this.viewportCamera = camera;\n      }\n      this.cameras[camera.uuid] = camera;\n      this.signals.cameraAdded.dispatch(camera);\n    }\n  },\n  removeCamera: function (camera) {\n    var scope = this;\n    var isActiveCamera = scope.viewportCamera.uuid === camera.uuid;\n    if (scope.cameras[camera.uuid] !== undefined) {\n      delete scope.cameras[camera.uuid];\n      if (isActiveCamera) {\n        // Assign new active camera\n        var remainingCameraUids = Object.keys(scope.cameras);\n        if (remainingCameraUids.length > 0) {\n          var newActiveCameraUid = remainingCameraUids[0];\n          if (workspace && workspace.sidebar && workspace.sidebar.scene) {\n            workspace.sidebar.scene.refreshCameraCheckboxes();\n          }\n          scope.viewportCamera = scope.cameras[newActiveCameraUid];\n          scope.scene.userData.activeCamera = newActiveCameraUid;\n          scope.signals.activeCameraChanged.dispatch(newActiveCameraUid);\n        } else {\n          scope.viewportCamera = scope.defaultCameraWhenNoneIsPresent;\n        }\n      }\n      this.signals.cameraRemoved.dispatch(camera);\n    }\n  },\n  //\n\n  addHelper: function () {\n    var geometry = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.SphereBufferGeometry(2, 4, 2);\n    var material = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({\n      color: 0xff0000,\n      visible: false\n    });\n    return function (object, target, helper) {\n      if (helper === undefined) {\n        if (object.isCamera) {\n          helper = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.CameraHelper(object);\n        } else if (object.isPointLight) {\n          helper = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.PointLightHelper(object, 1);\n        } else if (object.isDirectionalLight) {\n          helper = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.DirectionalLightHelper(object, 1);\n        } else if (object.isSpotLight) {\n          helper = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.SpotLightHelper(object, 1);\n        } else if (object.isHemisphereLight) {\n          helper = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.HemisphereLightHelper(object, 1);\n        } else if (object.isRectAreaLight) {\n          helper = new _core_helpers_RectAreaLightHelper_js__WEBPACK_IMPORTED_MODULE_8__.RectAreaLightHelper(object);\n        } else if (object.isSkinnedMesh) {\n          helper = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.SkeletonHelper(object.skeleton.bones[0]);\n        } else {\n          // no helper for this object type\n          return;\n        }\n        var picker = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, material);\n        picker.name = 'picker';\n        picker.userData.object = target;\n        helper.add(picker);\n      }\n      if (object.isCamera) {\n        this.cameraHelpers.add(helper);\n        if (target.isDirectionalLight) {\n          target.advancedHelperObject = helper;\n          helper.visible = target.userData.advancedHelper ? true : false;\n        }\n      } else {\n        this.lightHelpers.add(helper);\n      }\n      //object.isCamera ? this.cameraHelpers.add( helper ) : this.lightHelpers.add( helper );\n      this.helpers[object.id] = helper;\n      this.signals.helperAdded.dispatch(helper);\n    };\n  }(),\n  removeHelper: function (object) {\n    if (this.helpers[object.id] !== undefined) {\n      var helper = this.helpers[object.id];\n      helper.parent.remove(helper);\n      delete this.helpers[object.id];\n      this.signals.helperRemoved.dispatch(helper);\n    }\n  },\n  //\n\n  addScript: function (script) {\n    this.scripts.push(script);\n    this.signals.scriptAdded.dispatch(script);\n  },\n  removeScript: function (index) {\n    this.scripts.splice(index, 1);\n    this.signals.scriptRemoved.dispatch(script);\n  },\n  //\n\n  addAsset: function (type, folderId, item, onLoad) {\n    return this.assets.add(type, folderId, item, onLoad);\n  },\n  removeAsset: function (type, id) {\n    var asset = this.assets.get(type, 'id', id);\n    var assetId = asset[type.toLowerCase() + 'Id'];\n    this.assets.remove(type, 'id', id);\n    this.signals.assetRemoved.dispatch(type, assetId);\n  },\n  getObjectMaterial: function (object, slot) {\n    var material = object.material;\n    if (Array.isArray(material) && slot !== undefined) {\n      material = material[slot];\n    }\n    return material;\n  },\n  setObjectMaterial: function (object, slot, newMaterial) {\n    if (Array.isArray(object.material) && slot !== undefined) {\n      object.material[slot] = newMaterial;\n    } else {\n      object.material = newMaterial;\n    }\n  },\n  setViewportCamera: function (uuid) {\n    if (this.cameras[uuid]) {\n      this.viewportCamera = this.cameras[uuid];\n    }\n    this.signals.viewportCameraChanged.dispatch();\n  },\n  setPaint: function (paint) {\n    this.paint = paint;\n  },\n  getConnectedAttributeName: function (object) {\n    for (var attributeName in this.attributeTextMap) {\n      if (this.attributeTextMap[attributeName] == object.uuid) {\n        return attributeName;\n      }\n    }\n    return null;\n  },\n  removeAttributeTextConnection: function (attributeName) {\n    if (this.attributeTextMap[attributeName]) {\n      delete this.attributeTextMap[attributeName];\n    }\n  },\n  updateAttributeTextConnection: function (attribute) {\n    var uuid = this.attributeTextMap[attribute.name];\n    if (uuid) {\n      var object = this.objectByUuid(uuid);\n      object.text = attribute.value.toString();\n      object.updateGeometry();\n      this.signals.objectChanged.dispatch(object);\n    }\n  },\n  //\n\n  select: function (object, anyway) {\n    if (this.selected === object && !anyway) return;\n    console.log(\"EDITOR.JS============\", object);\n    if ($('#prefab-panel').is(':visible')) {\n      let prefabDiv = $('#outliner1 .option:first .name').text();\n      console.log(prefabDiv);\n      if (prefabDiv !== 'Prefab') {\n        var option = document.createElement('div');\n        option.draggable = false;\n        var html = '<span class=\"line\"></span>';\n        html += '<span class=\"name\">Prefab</span>';\n        option.innerHTML = html;\n        // option.value = object.id;\n        option.style.paddingLeft = '20px';\n        option.className = 'option';\n        $('#prefab-panel #outliner1').append(option);\n      }\n      if (object) {\n        const loader = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.ObjectLoader();\n        console.log(\"ppppppp\", object);\n        let exObj = localStorage.getItem(object.uuid);\n        console.log('ex item=======', exObj);\n        if (!exObj) {\n          // Serialize the object\n          const serializedObj = JSON.stringify(object.toJSON());\n\n          // Store the serialized object in LocalStorage\n          localStorage.setItem(object.uuid, serializedObj);\n\n          // localStorage.setItem(object.uuid, JSON.stringify({ obj: object }))\n          var option = document.createElement('div');\n          option.draggable = true;\n          var html = '<span class=\"line\"></span>';\n          html += '<span class=\"name\">' + object.name + '</span>';\n          option.innerHTML = html;\n          option.value = object.id;\n          option.style.paddingLeft = '43px';\n          option.className = 'option';\n          option.addEventListener('click', () => {\n            console.log(\"Object ID====\", object.uuid);\n            // let objToAdd = JSON.parse(localStorage.getItem(object.uuid))\n\n            // Retrieve the serialized object from LocalStorage\n            const retrievedObj = JSON.parse(localStorage.getItem(object.uuid));\n\n            // Create a new Three.js object from the retrieved data\n            const loader = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.ObjectLoader();\n            const newObj = loader.parse(retrievedObj);\n            console.log(\"ORIGINAL OBJECT ===\", newObj);\n            // var geometry = new THREE.BoxGeometry(20, 20, 20);\n            // var material = new THREE.MeshBasicMaterial({ color: \"#fff\" });\n\n            // console.log(\"mesh========\", mesh);\n\n            // this.scene.add(mesh)\n            new _commands_AddObjectCommand_js__WEBPACK_IMPORTED_MODULE_10__.AddObjectCommand(this, newObj).execute();\n          });\n          $('#prefab-panel #outliner1').append(option);\n        }\n      }\n    }\n\n    // const prefab = new THREE.Object3D();\n    // let obj = {...object};\n    // prefab.add(obj)\n    // console.log(JSON.stringify({...prefab}))\n\n    //prevent to select unvisible object\n    //if(object && !object.visible) return;\n\n    var uuid = null;\n    if (object !== null) {\n      uuid = object.uuid;\n    }\n    this.selected = object;\n    this.config.setKey('selected', uuid);\n    this.signals.objectSelected.dispatch(object);\n  },\n  getObjectById: function (id) {\n    if (id === this.viewportCamera.id) {\n      return this.viewportCamera;\n    }\n    return this.scene.getObjectById(id, true);\n  },\n  selectById: function (id) {\n    var object = this.getObjectById(id);\n    //prevent select locked user camera\n    //if ( object.visible && (object.userData && !object.userData.locked) ) {\n    if (object) {\n      this.select(object);\n    }\n  },\n  selectByUuid: function (uuid) {\n    var scope = this;\n    this.scene.traverse(function (child) {\n      if (child.uuid === uuid) {\n        scope.select(child);\n      }\n    });\n  },\n  deselect: function () {\n    this.select(null);\n  },\n  focus: function (object) {\n    if (object !== undefined) {\n      this.signals.objectFocused.dispatch(object);\n    }\n  },\n  focusById: function (id) {\n    this.focus(this.scene.getObjectById(id, true));\n  },\n  clear: function () {\n    this.isInClearMode = true;\n    this.history.clear();\n    this.signals.cameraResetted.dispatch();\n    this.scene.name = 'Scene';\n    this.scene.userData = {};\n    this.scene.background = new _libs_three_module_js__WEBPACK_IMPORTED_MODULE_0__.Color(0x14151b);\n    this.scene.environment = null;\n    this.scene.fog = null;\n    var objects = this.scene.children;\n    while (objects.length > 0) {\n      this.removeObject(objects[0]);\n    }\n    this.geometries = {};\n    this.materials = {};\n    this.textures = {};\n    this.attributes = [];\n    this.attributeTextMap = {};\n    this.scripts = [{\n      name: 'untitled',\n      json: [],\n      source: ''\n    }];\n    this.timelines = [{\n      name: 'untitled',\n      duration: 20,\n      channels: [],\n      tracks: []\n    }];\n    this.timelineIndex = 0;\n    this.materialsRefCounter.clear();\n    this.tags = {};\n    this.mixer.stopAllAction();\n    this.deselect();\n    this.signals.editorCleared.dispatch();\n    this.isInClearMode = false;\n  },\n  //\n\n  fromJSON: function (json) {\n    var scope = this;\n    var loader = new _utils_ObjectLoader_js__WEBPACK_IMPORTED_MODULE_9__.ObjectLoader(this.assets);\n    this.signals.cameraResetted.dispatch();\n    this.history.fromJSON(json.history);\n    this.scripts = json.scripts;\n    this.attributes = json.attributes;\n    this.attributeTextMap = json.attributeTextMap ? json.attributeTextMap : {};\n    this.tags = json.tags;\n    this.timelines = json.timelines;\n    loader.parse(json.scene, function (scene) {\n      scope.setScene(scene);\n      scope.addFirstCameraToSceneIfRequired();\n      scope.signals.windowResize.dispatch();\n      scope.signals.sceneLoaded.dispatch();\n      scope.signals.activeCameraChanged.dispatch(scope.scene.userData.activeCamera);\n    });\n  },\n  toJSON: function () {\n    var objects = Object.keys(this.objects);\n    var playBlocks = [];\n    var audioTracks = [];\n    var textures = [];\n    var assets = {\n      images: [],\n      environments: [],\n      audios: [],\n      videos: [],\n      fonts: [],\n      animations: []\n    };\n    if (this.scene.userData.background) {\n      if (this.scene.userData.background.type == 'Texture') {\n        assets.images.push(this.scene.userData.background.id);\n      } else {\n        assets.environments.push(this.scene.userData.background.id);\n      }\n    }\n    UtilsHelper.lookUp(editor.scripts, 'type', 'play', playBlocks);\n    for (var block of playBlocks) {\n      if (block.mode == 'audio' && block.audioId && block.audio) {\n        assets.audios.push(block.audioId);\n      } else if (block.mode == 'video' && block.videoId && block.video) {\n        assets.videos.push(block.videoId);\n      } else if (block.mode == \"animation\" && block.animationId && block.animation) {\n        assets.animations.push(block.animationId);\n      }\n    }\n    UtilsHelper.lookUp(editor.scripts, 'type', 'change', textures);\n    textures.forEach(texture => {\n      if (texture.values.isAbout === \"texture\" || texture.values.isAbout === \"equirect\") {\n        const {\n          assetId,\n          mapAssetId\n        } = texture.values;\n        [assetId, mapAssetId].forEach(asset => {\n          if ((0,_utils_index__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(asset) && asset !== -1) {\n            assets.images.push(asset);\n          }\n        });\n      }\n    });\n    for (var font of this.assets.fonts) {\n      if (font.id !== 'defaultFont') assets.fonts.push(font.id);\n    }\n    UtilsHelper.lookUp(editor.timelines, 'audio', true, audioTracks);\n    for (var track of audioTracks) {\n      assets.audios.push(track.id);\n    }\n    var autostart = {};\n    this.scene.traverse(function (child) {\n      if (child.animations.length > 0) {\n        autostart[child.uuid] = {};\n        child.animations.forEach(animation => {\n          autostart[child.uuid][animation.uuid] = animation.playing;\n        });\n      }\n    });\n    return {\n      metadata: {\n        type: 'arcade.scene'\n      },\n      project: {\n        shadows: this.config.getKey('project/renderer/shadows'),\n        shadowType: this.config.getKey('project/renderer/shadowType'),\n        vr: this.config.getKey('project/vr'),\n        physicallyCorrectLights: this.config.getKey('project/renderer/physicallyCorrectLights'),\n        toneMapping: this.config.getKey('project/renderer/toneMapping'),\n        toneMappingExposure: this.config.getKey('project/renderer/toneMappingExposure'),\n        filter: this.config.getKey('project/filter/live')\n      },\n      scene: this.scene.toJSON(),\n      objects: objects,\n      scripts: this.scripts,\n      history: this.history.toJSON(),\n      assets: assets,\n      attributes: this.attributes,\n      attributeTextMap: this.attributeTextMap,\n      tags: this.tags,\n      timelines: this.timelines,\n      autostart: autostart\n    };\n  },\n  objectByUuid: function (uuid) {\n    return this.scene.getObjectByProperty('uuid', uuid);\n  },\n  execute: function (cmd, optionalName) {\n    this.history.execute(cmd, optionalName);\n  },\n  undo: function () {\n    this.history.undo();\n  },\n  redo: function () {\n    this.history.redo();\n  },\n  //\n\n  loadState: function () {\n    if (this.storage.state) {\n      this.fromJSON(this.storage.state);\n    } else {\n      // State not available - should come here only for newly created projects\n      this.addFirstCameraToSceneIfRequired();\n      this.signals.windowResize.dispatch();\n      this.signals.sceneLoaded.dispatch();\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/editor/ui/Editor.js\n");

/***/ })

});